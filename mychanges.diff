diff --git a/runelite-api/src/main/java/net/runelite/api/Client.java b/runelite-api/src/main/java/net/runelite/api/Client.java
index f1b161df..b6f50030 100644
--- a/runelite-api/src/main/java/net/runelite/api/Client.java
+++ b/runelite-api/src/main/java/net/runelite/api/Client.java
@@ -205,20 +205,25 @@ public class Client
 		return client.getWidgetPositionsY();
 	}
         
-    public String[] getPlayerOptions()
-    {
-            return client.getPlayerOptions();
-    }
-
-    public boolean[] getPlayerOptionsPriorities()
-    {
-            return client.getPlayerOptionsPriorities();
-    }
-
-    public int[] getPlayerMenuType()
-    {
-            return client.getPlayerMenuTypes();
-    }
+        public String[] getPlayerOptions()
+        {
+                return client.getPlayerOptions();
+        }
+
+        public boolean[] getPlayerOptionsPriorities()
+        {
+                return client.getPlayerOptionsPriorities();
+        }
+
+        public int[] getPlayerMenuType()
+        {
+                return client.getPlayerMenuTypes();
+        }
+        
+        public String[] getMenuOptions()
+        {
+                return client.getMenuOptions();
+        }
 
 	public int getMapScale()
 	{
diff --git a/runelite-client/src/main/java/net/runelite/client/RuneLite.java b/runelite-client/src/main/java/net/runelite/client/RuneLite.java
index e5712009..df4a6f25 100644
--- a/runelite-client/src/main/java/net/runelite/client/RuneLite.java
+++ b/runelite-client/src/main/java/net/runelite/client/RuneLite.java
@@ -33,6 +33,7 @@ import java.util.concurrent.ScheduledExecutorService;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 import net.runelite.api.Client;
+import net.runelite.client.menus.MenuManager;
 import net.runelite.client.plugins.PluginManager;
 import net.runelite.client.ui.ClientUI;
 import net.runelite.client.ui.overlay.OverlayRenderer;
@@ -53,6 +54,7 @@ public class RuneLite
 
 	private ClientUI gui;
 	private PluginManager pluginManager;
+	private MenuManager menuManager;
 	private OverlayRenderer renderer;
 	private EventBus eventBus = new EventBus(this::eventExceptionHandler);
 	private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
@@ -70,7 +72,9 @@ public class RuneLite
 	public void start() throws Exception
 	{
 		gui = new ClientUI();
-
+                
+		menuManager = new MenuManager(this);
+		eventBus.register(menuManager);
 		pluginManager = new PluginManager(this);
 		pluginManager.loadAll();
 
@@ -106,6 +110,11 @@ public class RuneLite
 	{
 		return pluginManager;
 	}
+        
+        public MenuManager getMenuManager()
+        {
+                return menuManager;
+        }
 
 	public OverlayRenderer getRenderer()
 	{
diff --git a/runelite-client/src/main/java/net/runelite/client/events/PlayerMenuOptionClicked.java b/runelite-client/src/main/java/net/runelite/client/events/PlayerMenuOptionClicked.java
index 04e8adef..4e0d9c56 100644
--- a/runelite-client/src/main/java/net/runelite/client/events/PlayerMenuOptionClicked.java
+++ b/runelite-client/src/main/java/net/runelite/client/events/PlayerMenuOptionClicked.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, Robin  <Adam@sigterm.info>
+ * Copyright (c) 2017, Robin <robin.weymans@gmail.com>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
@@ -31,6 +31,7 @@ package net.runelite.client.events;
 public class PlayerMenuOptionClicked {
     private String menuOption;
     private String menuTarget;
+    private int menuAction;
     
     public PlayerMenuOptionClicked()
     {
@@ -55,4 +56,15 @@ public class PlayerMenuOptionClicked {
     {
             this.menuTarget = menuTarget;
     }
+    
+    public int getMenuAction()
+    {
+            return menuAction;
+    }
+    
+    public void setMenuAction(int menuAction)
+    {
+            this.menuAction = menuAction;
+    }
+    
 }
diff --git a/runelite-client/src/main/java/net/runelite/client/events/PlayerMenuOptionsChanged.java b/runelite-client/src/main/java/net/runelite/client/events/PlayerMenuOptionsChanged.java
index eacfc6d3..74529d60 100644
--- a/runelite-client/src/main/java/net/runelite/client/events/PlayerMenuOptionsChanged.java
+++ b/runelite-client/src/main/java/net/runelite/client/events/PlayerMenuOptionsChanged.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, Adam <Adam@sigterm.info>
+ * Copyright (c) 2017, Robin <robin.weymans@gmail.com>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
diff --git a/runelite-client/src/main/java/net/runelite/client/plugins/hiscore/Hiscore.java b/runelite-client/src/main/java/net/runelite/client/plugins/hiscore/Hiscore.java
index 6684ddbc..946dcb65 100644
--- a/runelite-client/src/main/java/net/runelite/client/plugins/hiscore/Hiscore.java
+++ b/runelite-client/src/main/java/net/runelite/client/plugins/hiscore/Hiscore.java
@@ -72,7 +72,7 @@ public class Hiscore extends Plugin implements ActionListener
 
 		ui.getNavigationPanel().addNavigation(navButton);
                 
-                addLookupOption();
+                RuneLite.getRunelite().getMenuManager().addPlayerMenuItem("Lookup", (username) -> hiscorePanel.lookup(username));
 	}
 
 	@Override
@@ -86,63 +86,6 @@ public class Hiscore extends Plugin implements ActionListener
 	{
 		ui.setPluginPanel(hiscorePanel);
 		ui.expand();
-	}
-        
-        @Subscribe
-        public void onPlayerMenuOptionsChanged(PlayerMenuOptionsChanged optionsChanged){
-                int idx = optionsChanged.getIndex();
-                /*
-                 * If the lookup option is going to be overwritten and there is an empty spot available, change it to the new index.
-                 * When no option is available, it does not add the lookup option.
-                 *
-                 */
-                if( lookupMenuIndex == idx )
-                {
-                        int emptySpot = findEmptySpot();
-                        if( emptySpot != -1 )
-                        {
-                                lookupMenuIndex = emptySpot;
-                                addLookupOption();
-                        }
-                }
-        }
-        
-        private void addLookupOption(){
-                client.getPlayerOptions()[lookupMenuIndex] = lookupMenuText;
-                client.getPlayerOptionsPriorities()[lookupMenuIndex] = true;
-                client.getPlayerMenuType()[lookupMenuIndex] = lookupMenuType;
-        }
-        
-        /* This method finds an empty spot between 4 and 7.
-         * The lookup function should always be underneath "Follow" (index 2) and "Trade with" (index 3).
-         * Thats why I start with index 4.
-         *
-         * Returns -1 if no spot is available
-         */
-        private int findEmptySpot(){
-                
-                int index = 4;
-                /*
-                 * The index needs to be between 4 and 7,
-                 * It can't be the same as the one it's in right now
-                 * It has to be a free spot
-                 */
-                while(index < 8 && ( index == lookupMenuIndex || client.getPlayerOptions()[index] != null ) )
-                {
-                        index++;
-                }
-                
-                //If an empty spot was found, return the index, otherwise return -1;
-                return index != 8 ? index : -1;
-                    
-        }
+	}        
         
-        @Subscribe
-        public void onLookupMenuClicked(PlayerMenuOptionClicked event)
-        {
-                if(event.getMenuOption().equals(lookupMenuText))
-                {
-                        hiscorePanel.lookup(event.getMenuTarget());
-                }
-        }
 }
diff --git a/runelite-client/src/main/java/net/runelite/inject/callbacks/Hooks.java b/runelite-client/src/main/java/net/runelite/inject/callbacks/Hooks.java
index 92d9047f..8e889ee3 100644
--- a/runelite-client/src/main/java/net/runelite/inject/callbacks/Hooks.java
+++ b/runelite-client/src/main/java/net/runelite/inject/callbacks/Hooks.java
@@ -24,12 +24,9 @@
  */
 package net.runelite.inject.callbacks;
 
-import java.util.Arrays;
 import java.util.stream.IntStream;
 import net.runelite.client.RuneLite;
 import net.runelite.client.events.ExperienceChanged;
-import net.runelite.client.plugins.Plugin;
-import net.runelite.client.plugins.hiscore.Hiscore;
 import net.runelite.client.events.MapRegionChanged;
 import net.runelite.client.events.PlayerMenuOptionClicked;
 import net.runelite.client.events.PlayerMenuOptionsChanged;
@@ -103,6 +100,8 @@ public class Hooks
                         PlayerMenuOptionClicked playerMenuOptionClicked = new PlayerMenuOptionClicked();
                         playerMenuOptionClicked.setMenuOption(var4);
                         playerMenuOptionClicked.setMenuTarget(username);
+                        playerMenuOptionClicked.setMenuAction(menuAction);
+                        
                         runelite.getEventBus().post(playerMenuOptionClicked);
                 }
         }
diff --git a/runescape-api/src/main/java/net/runelite/rs/api/Client.java b/runescape-api/src/main/java/net/runelite/rs/api/Client.java
index 1c05ee4d..e2a043d8 100644
--- a/runescape-api/src/main/java/net/runelite/rs/api/Client.java
+++ b/runescape-api/src/main/java/net/runelite/rs/api/Client.java
@@ -134,10 +134,7 @@ public interface Client extends GameEngine
         @Import("playerMenuTypes")
         int[] getPlayerMenuTypes();
 
-	@Import("menuActions")
-	String[] getMenuActions();
-
-	@Import("menuTargets")
+        @Import("menuTargets")
 	String[] getMenuTargets();
 
 	@Import("menuOptions")
