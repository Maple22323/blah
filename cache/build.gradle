/*
 * Copyright (c) 2019, Mark Koester <mark.koester1@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

plugins {
    id 'java-library'
    id 'antlr'
}

ext {
    antlrVersion = '4.6'
    cacheVersion = 165
}

dependencies {
    implementation project(':http-api')
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.apache.commons:commons-compress:1.10'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'io.netty:netty-buffer:4.1.0.Final'
    implementation 'commons-cli:commons-cli:1.3.1'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.slf4j:slf4j-simple:1.7.12'
    antlr "org.antlr:antlr4:${antlrVersion}"
}

processResources {
    filesNotMatching('djb2.properties') {
        expand(project.properties)
    }
}

processTestResources {
    expand(project.properties)
}

tasks.withType(Checkstyle) {
    exclude '**/rs2asmParser.java'
    exclude '**/rs2asmLexer.java'
    exclude '**/rs2asmBaseListener.java'
    exclude '**/rs2asmListener.java'
}

task testsJar(type: Jar) {
    archiveClassifier.set('tests')
    from(sourceSets.test.output)
}

description = 'Cache'
publishing.publications.maven.artifact(testsJar)
