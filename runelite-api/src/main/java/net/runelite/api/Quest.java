package net.runelite.api;

import lombok.Getter;

@Getter
public enum Quest
{
	BLACK_KNIGHTS_FORTRESS(Setting.QUEST_BLACK_KNIGHTS_FORTRESS, 4, false),
	COOKS_ASSISTANT(Setting.QUEST_COOKS_ASSISTANT, 2, false),
	DEMON_SLAYER(Varbits.QUEST_DEMON_SLAYER, 3, false),
	DORICS_QUEST(Setting.QUEST_DORICS_QUEST, 100, false),
	DRAGON_SLAYER(Setting.QUEST_DRAGON_SLAYER, 10, false),
	ERNEST_THE_CHICKEN(Setting.QUEST_ERNEST_THE_CHICKEN, 3, false),
	GOBLIN_DIPLOMACY(Varbits.QUEST_GOBLIN_DIPLOMACY, 6, false),
	IMP_CATCHER(Setting.QUEST_IMP_CATCHER, 2, false),
	THE_KNIGHTS_SWORD(Setting.QUEST_THE_KNIGHTS_SWORD, 7, false),
	PIRATES_TREASURE(Setting.QUEST_PIRATES_TREASURE, 4, false),
	PRINCE_ALI_RESCUE(Setting.QUEST_PRINCE_ALI_RESCUE, 110, false),
	THE_RESTLESS_GHOST(Setting.QUEST_THE_RESTLESS_GHOST, 5, false),
	ROMEO_AND_JULIET(Setting.QUEST_ROMEO_AND_JULIET, 100, false),
	RUNE_MYSTERIES(Setting.QUEST_RUNE_MYSTERIES, 6, false),
	SHEEP_SHEARER(Setting.QUEST_SHEEP_SHEARER, 21, false),
	SHIELD_OF_ARRAV(Setting.QUEST_SHIELD_OF_ARRAV, 7, false),
	VAMPIRE_SLAYER(Setting.QUEST_VAMPIRE_SLAYER, 3, false),
	WITCHS_POTION(Setting.QUEST_WITCHS_POTION, 3, false),
	MISTHALIN_MYSTERY(Varbits.QUEST_MISTHALIN_MYSTERY, 135, false),
	THE_CORSAIR_CURSE(Varbits.QUEST_THE_CORSAIR_CURSE, 60, false),
	ANIMAL_MAGNETISM(Varbits.QUEST_ANIMAL_MAGNETISM, 240, true),
	BETWEEN_A_ROCK(Varbits.QUEST_BETWEEN_A_ROCK, 110, true),
	BIG_CHOMPY_BIRD_HUNTING(Setting.QUEST_BIG_CHOMPY_BIRD_HUNTING, 65, true),
	BIOHAZARD(Setting.QUEST_BIOHAZARD, 16, true),
	CABIN_FEVER(Setting.QUEST_CABIN_FEVER, 131, true),
	CLOCK_TOWER(Setting.QUEST_CLOCK_TOWER, 8, true),
	CONTACT(Varbits.QUEST_CONTACT, 130, true),
	ZOGRE_FLESH_EATERS(Varbits.QUEST_ZOGRE_FLESH_EATERS, 13, true),
	CREATURE_OF_FENKENSTRAIN(Setting.QUEST_CREATURE_OF_FENKENSTRAIN, 7, true),
	DARKNESS_OF_HALLOWVALE(Varbits.QUEST_DARKNESS_OF_HALLOWVALE, 320, true),
	DEATH_TO_THE_DORGESHUUN(Varbits.QUEST_DEATH_TO_THE_DORGESHUUN, 13, true),
	DEATH_PLATEAU(Setting.QUEST_DEATH_PLATEAU, 80, true),
	DESERT_TREASURE(Varbits.QUEST_DESERT_TREASURE, 15, true),
	DEVIOUS_MINDS(Varbits.QUEST_DEVIOUS_MINDS, 80, true),
	THE_DIG_SITE(Setting.QUEST_THE_DIG_SITE, 9, true),
	DRUIDIC_RITUAL(Setting.QUEST_DRUIDIC_RITUAL, 4, true),
	DWARF_CANNON(Setting.QUEST_DWARF_CANNON, 11, true),
	EADGARS_RUSE(Setting.QUEST_EADGARS_RUSE, 110, true),
	EAGLES_PEAK(Varbits.QUEST_EAGLES_PEAK, 40, true),
	ELEMENTAL_WORKSHOP_I(Setting.QUEST_ELEMENTAL_WORKSHOP_I, 1048576, true),
	ELEMENTAL_WORKSHOP_II(Varbits.QUEST_ELEMENTAL_WORKSHOP_II, 11, true),
	ENAKHRAS_LAMENT(Varbits.QUEST_ENAKHRAS_LAMENT, 70, true),
	ENLIGHTENED_JOURNEY(Varbits.QUEST_ENLIGHTENED_JOURNEY, 200, true),
	THE_EYES_OF_GLOUPHRIE(Varbits.QUEST_THE_EYES_OF_GLOUPHRIE, 60, true),
	FAIRYTALE_I_GROWING_PAINS(Varbits.QUEST_FAIRYTALE_I_GROWING_PAINS, 90, true),
	FAIRYTALE_II_CURE_A_QUEEN(Varbits.QUEST_FAIRYTALE_II_CURE_A_QUEEN, 81, true),
	FAMILY_CREST(Setting.QUEST_FAMILY_CREST, 11, true),
	THE_FEUD(Varbits.QUEST_THE_FEUD, 28, true),
	FIGHT_ARENA(Setting.QUEST_FIGHT_ARENA, 14, true),
	FISHING_CONTEST(Setting.QUEST_FISHING_CONTEST, 5, true),
	FORGETTABLE_TALE(Varbits.QUEST_FORGETTABLE_TALE, 140, true),
	THE_FREMENNIK_TRIALS(Setting.QUEST_THE_FREMENNIK_TRIALS, 10, true),
	WATERFALL_QUEST(Setting.QUEST_WATERFALL_QUEST, 10, true),
	GARDEN_OF_TRANQUILLITY(Varbits.QUEST_GARDEN_OF_TRANQUILLITY, 60, true),
	GERTRUDES_CAT(Setting.QUEST_GERTRUDES_CAT, 6, true),
	GHOSTS_AHOY(Varbits.QUEST_GHOSTS_AHOY, 8, true),
	THE_GIANT_DWARF(Varbits.QUEST_THE_GIANT_DWARF, 50, true),
	THE_GOLEM(Varbits.QUEST_THE_GOLEM, 10, true),
	THE_GRAND_TREE(Setting.QUEST_THE_GRAND_TREE, 160, true),
	THE_HAND_IN_THE_SAND(Varbits.QUEST_THE_HAND_IN_THE_SAND, 160, true),
	HAUNTED_MINE(Setting.QUEST_HAUNTED_MINE, 11, true),
	HAZEEL_CULT(Setting.QUEST_HAZEEL_CULT, 9, true),
	HEROES_QUEST(Setting.QUEST_HEROES_QUEST, 15, true),
	HOLY_GRAIL(Setting.QUEST_HOLY_GRAIL, 10, true),
	HORROR_FROM_THE_DEEP(Varbits.QUEST_HORROR_FROM_THE_DEEP, 10, true),
	ICTHLARINS_LITTLE_HELPER(Varbits.QUEST_ICTHLARINS_LITTLE_HELPER, 26, true),
	IN_AID_OF_THE_MYREQUE(Varbits.QUEST_IN_AID_OF_THE_MYREQUE, 421, true),
	IN_SEARCH_OF_THE_MYREQUE(Setting.QUEST_IN_SEARCH_OF_THE_MYREQUE, 101, true),
	JUNGLE_POTION(Setting.QUEST_JUNGLE_POTION, 12, true),
	LEGENDS_QUEST(Setting.QUEST_LEGENDS_QUEST, 75, true),
	LOST_CITY(Setting.QUEST_LOST_CITY, 6, true),
	THE_LOST_TRIBE(Varbits.QUEST_THE_LOST_TRIBE, 11, true),
	LUNAR_DIPLOMACY(Varbits.QUEST_LUNAR_DIPLOMACY, 190, true),
	MAKING_HISTORY(Varbits.QUEST_MAKING_HISTORY, 4, true),
	MERLINS_CRYSTAL(Setting.QUEST_MERLINS_CRYSTAL, 7, true),
	MONKEY_MADNESS_I(Setting.QUEST_MONKEY_MADNESS_I, 9, true),
	MONKS_FRIEND(Setting.QUEST_MONKS_FRIEND, 80, true),
	MOUNTAIN_DAUGHTER(Varbits.QUEST_MOUNTAIN_DAUGHTER, 70, true),
	MOURNINGS_ENDS_PART_I(Setting.QUEST_MOURNINGS_ENDS_PART_I, 8, true),
	MOURNINGS_ENDS_PART_II(Varbits.QUEST_MOURNINGS_ENDS_PART_II, 60, true),
	MURDER_MYSTERY(Setting.QUEST_MURDER_MYSTERY, 2, true),
	MY_ARMS_BIG_ADVENTURE(Varbits.QUEST_MY_ARMS_BIG_ADVENTURE, 311, true),
	NATURE_SPIRIT(Setting.QUEST_NATURE_SPIRIT, 110, true),
	OBSERVATORY_QUEST(Setting.QUEST_OBSERVATORY_QUEST, 7, true),
	ONE_SMALL_FAVOUR(Setting.QUEST_ONE_SMALL_FAVOUR, 276, true),
	PLAGUE_CITY(Setting.QUEST_PLAGUE_CITY, 29, true),
	PRIEST_IN_PERIL(Setting.QUEST_PRIEST_IN_PERIL, 60, true),
	RAG_AND_BONE_MAN(Setting.QUEST_RAG_AND_BONE_MAN, 4, true),
	RATCATCHERS(Varbits.QUEST_RATCATCHERS, 127, true),
	RECIPE_FOR_DISASTER(Varbits.QUEST_RECIPE_FOR_DISASTER, 5, true),
	RECRUITMENT_DRIVE(Varbits.QUEST_RECRUITMENT_DRIVE, 2, true),
	REGICIDE(Setting.QUEST_REGICIDE, 15, true),
	ROVING_ELVES(Setting.QUEST_ROVING_ELVES, 6, true),
	ROYAL_TROUBLE(Varbits.QUEST_ROYAL_TROUBLE, 21, true),
	RUM_DEAL(Setting.QUEST_RUM_DEAL, 19, true),
	SCORPION_CATCHER(Setting.QUEST_SCORPION_CATCHER, 6, true),
	SEA_SLUG(Setting.QUEST_SEA_SLUG, 12, true),
	THE_SLUG_MENACE(Varbits.QUEST_THE_SLUG_MENACE, 14, true),
	SHADES_OF_MORTTON(Setting.QUEST_SHADES_OF_MORTTON, 85, true),
	SHADOW_OF_THE_STORM(Varbits.QUEST_SHADOW_OF_THE_STORM, 125, true),
	SHEEP_HERDER(Setting.QUEST_SHEEP_HERDER, 3, true),
	SHILO_VILLAGE(Setting.QUEST_SHILO_VILLAGE, 15, true),
	A_SOULS_BANE(Varbits.QUEST_A_SOULS_BANE, 13, true),
	SPIRITS_OF_THE_ELID(Varbits.QUEST_SPIRITS_OF_THE_ELID, 60, true),
	SWAN_SONG(Varbits.QUEST_SWAN_SONG, 200, true),
	TAI_BWO_WANNAI_TRIO(Setting.QUEST_TAI_BWO_WANNAI_TRIO, 6, true),
	A_TAIL_OF_TWO_CATS(Varbits.QUEST_A_TAIL_OF_TWO_CATS, 70, true),
	TEARS_OF_GUTHIX(Varbits.QUEST_TEARS_OF_GUTHIX, 2, true),
	TEMPLE_OF_IKOV(Setting.QUEST_TEMPLE_OF_IKOV, 80, true),
	THRONE_OF_MISCELLANIA(Setting.QUEST_THRONE_OF_MISCELLANIA, 100, true),
	THE_TOURIST_TRAP(Setting.QUEST_THE_TOURIST_TRAP, 30, true),
	WITCHS_HOUSE(Setting.QUEST_WITCHS_HOUSE, 7, true),
	TREE_GNOME_VILLAGE(Setting.QUEST_TREE_GNOME_VILLAGE, 9, true),
	TRIBAL_TOTEM(Setting.QUEST_TRIBAL_TOTEM, 5, true),
	TROLL_ROMANCE(Setting.QUEST_TROLL_ROMANCE, 45, true),
	TROLL_STRONGHOLD(Setting.QUEST_TROLL_STRONGHOLD, 50, true),
	UNDERGROUND_PASS(Setting.QUEST_UNDERGROUND_PASS, 10, true),
	WANTED(Varbits.QUEST_WANTED, 11, true),
	WATCHTOWER(Setting.QUEST_WATCHTOWER, 13, true),
	COLD_WAR(Varbits.QUEST_COLD_WAR, 135, true),
	THE_FREMENNIK_ISLES(Varbits.QUEST_THE_FREMENNIK_ISLES, 340, true),
	TOWER_OF_LIFE(Varbits.QUEST_TOWER_OF_LIFE, 18, true),
	THE_GREAT_BRAIN_ROBBERY(Setting.QUEST_THE_GREAT_BRAIN_ROBBERY, 130, true),
	WHAT_LIES_BELOW(Varbits.QUEST_WHAT_LIES_BELOW, 150, true),
	OLAFS_QUEST(Varbits.QUEST_OLAFS_QUEST, 80, true),
	ANOTHER_SLICE_OF_HAM(Varbits.QUEST_ANOTHER_SLICE_OF_HAM, 11, true),
	DREAM_MENTOR(Varbits.QUEST_DREAM_MENTOR, 28, true),
	GRIM_TALES(Varbits.QUEST_GRIM_TALES, 60, true),
	KINGS_RANSOM(Varbits.QUEST_KINGS_RANSOM, 90, true),
	MONKEY_MADNESS_II(Varbits.QUEST_MONKEY_MADNESS_II, 191, true),
	CLIENT_OF_KOUREND(Varbits.QUEST_CLIENT_OF_KOUREND, 7, true),
	RAG_AND_BONE_MAN_II(Setting.QUEST_RAG_AND_BONE_MAN_II, 6, true),
	BONE_VOYAGE(Varbits.QUEST_BONE_VOYAGE, 50, true),
	THE_QUEEN_OF_THIEVES(Varbits.QUEST_THE_QUEEN_OF_THIEVES, 13, true),
	THE_DEPTHS_OF_DESPAIR(Varbits.QUEST_THE_DEPTHS_OF_DESPAIR, 11, true),
	DRAGON_SLAYER_II(Varbits.QUEST_DRAGON_SLAYER_II, 215, true);

	private final Setting setting;
	private final Varbits varbits;
	private final int maxValue;
	private final boolean members;

	Quest(Setting setting, int maxValue, boolean members)
	{
		this.varbits = null;
		this.setting = setting;
		this.maxValue = maxValue;
		this.members = members;
	}

	Quest(Varbits varbit, int maxValue, boolean members)
	{
		this.varbits = varbit;
		this.setting = null;
		this.maxValue = maxValue;
		this.members = members;
	}
}
