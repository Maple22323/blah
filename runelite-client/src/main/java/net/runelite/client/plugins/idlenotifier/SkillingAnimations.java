/*
 * Copyright (c) 2018, Magic fTail
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package net.runelite.client.plugins.idlenotifier;

import java.util.HashMap;
import java.util.Map;
import lombok.Getter;
import static net.runelite.api.AnimationID.*;

enum SkillingAnimations
{
	WOODCUTTING("woodcutting",
		WOODCUTTING_BRONZE, WOODCUTTING_IRON, WOODCUTTING_STEEL,
		WOODCUTTING_BLACK, WOODCUTTING_MITHRIL, WOODCUTTING_ADAMANT,
		WOODCUTTING_RUNE, WOODCUTTING_DRAGON, WOODCUTTING_INFERNAL,
		WOODCUTTING_3A_AXE
	),
	COOKING("cooking",
		COOKING_FIRE, COOKING_RANGE, COOKING_WINE
	),
	CRAFTING("crafting",
		GEM_CUTTING_OPAL, GEM_CUTTING_JADE, GEM_CUTTING_REDTOPAZ,
		GEM_CUTTING_SAPPHIRE, GEM_CUTTING_EMERALD, GEM_CUTTING_RUBY,
		GEM_CUTTING_DIAMOND, CRAFTING_GLASSBLOWING, CRAFTING_SPINNING,
		CRAFTING_BATTLESTAVES, CRAFTING_LEATHER
	),
	FLETCHING("fletching",
		FLETCHING_BOW_CUTTING, FLETCHING_STRING_NORMAL_SHORTBOW, FLETCHING_STRING_OAK_SHORTBOW,
		FLETCHING_STRING_WILLOW_SHORTBOW, FLETCHING_STRING_MAPLE_SHORTBOW, FLETCHING_STRING_YEW_SHORTBOW,
		FLETCHING_STRING_MAGIC_SHORTBOW, FLETCHING_STRING_NORMAL_LONGBOW, FLETCHING_STRING_OAK_LONGBOW,
		FLETCHING_STRING_WILLOW_LONGBOW, FLETCHING_STRING_MAPLE_LONGBOW, FLETCHING_STRING_YEW_LONGBOW,
		FLETCHING_STRING_MAGIC_LONGBOW
	),
	SMITHING("smithing",
		SMITHING_ANVIL, SMITHING_SMELTING, SMITHING_CANNONBALL
	),
	FISHING("fishing",
		FISHING_NET, FISHING_BIG_NET, FISHING_HARPOON,
		FISHING_BARBTAIL_HARPOON, FISHING_DRAGON_HARPOON, FISHING_CAGE,
		FISHING_POLE_CAST, FISHING_INFERNAL_HARPOON, FISHING_OILY_ROD,
		FISHING_KARAMBWAN, FISHING_CRUSHING_INFERNAL_EELS, FISHING_BAREHAND
	),
	MINING("mining",
		MINING_BRONZE_PICKAXE, MINING_IRON_PICKAXE, MINING_STEEL_PICKAXE,
		MINING_BLACK_PICKAXE, MINING_MITHRIL_PICKAXE, MINING_ADAMANT_PICKAXE,
		MINING_RUNE_PICKAXE, MINING_DRAGON_PICKAXE, MINING_DRAGON_PICKAXE_ORN,
		MINING_INFERNAL_PICKAXE, MINING_3A_PICKAXE, MINING_MOTHERLODE_BRONZE,
		MINING_MOTHERLODE_IRON, MINING_MOTHERLODE_STEEL, MINING_MOTHERLODE_BLACK,
		MINING_MOTHERLODE_MITHRIL, MINING_MOTHERLODE_ADAMANT, MINING_MOTHERLODE_RUNE,
		MINING_MOTHERLODE_DRAGON, MINING_MOTHERLODE_DRAGON_ORN, MINING_MOTHERLODE_INFERNAL,
		MINING_MOTHERLODE_3A
	),
	HERBLORE("training herblore",
		HERBLORE_POTIONMAKING, HERBLORE_MAKE_TAR
	),
	PRAYER("training prayer",
		USING_GILDED_ALTAR
	),
	MAGIC("training magic",
		MAGIC_CHARGING_ORBS, MAGIC_LUNAR_STRING_JEWELRY, MAGIC_LUNAR_BAKE_PIE
	);

	@Getter
	String activity;

	@Getter
	int[] animations;

	private static final Map<Integer, SkillingAnimations> skillingAnimations = new HashMap<>();

	static
	{
		for (SkillingAnimations skill : values())
		{
			for (int animationId : skill.getAnimations())
			{
				skillingAnimations.put(animationId, skill);
			}
		}
	}

	SkillingAnimations(String activity, int... animations)
	{
		this.activity = activity;
		this.animations = animations;
	}

	public static SkillingAnimations getSkillingAnimations(int animationId)
	{
		return skillingAnimations.get(animationId);
	}
}
